from langchain_openai import AzureChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_groq import ChatGroq
from utils import pretty_print_messages, read_pddl_file

from textwrap import dedent
from langgraph.prebuilt import create_react_agent
from langgraph_supervisor import create_supervisor

from llm_config import (
    small_model
)
import os


def workflow_planning(domain, problem):
    # Create a planning agent
    research_agent = create_react_agent(
        model=small_model,  # Pass your Groq model here
        tools=[],  # Add any tools if needed
        prompt=dedent(
            f"""
            You are a plan reviewer, you are:
                always given a pddl domain and pddl problem file
                sometimes given a pddl file for types for a specific problem
                
            ------ DOMAIN START ------
            {domain}
            ------ DOMAIN END ------
            ------ PROBLEM START ------
            {problem}
            ------ PROBLEM END ------
            
            Your task:
                - generate a plan with steps in plain english for the given pddl domain and problem
                - you are not concerned with the actual pddl syntax, just optimal steps

            INSTRUCTIONS:
            - After you're done with your tasks, respond to the supervisor directly
            - Respond ONLY with the results of your work, do NOT include ANY other text.
            """
        ),
        name="plan_generator",
    )
    reviewing_agent = create_react_agent(
        model=small_model,  # Pass your Groq model here
        tools=[],  # Add any tools if needed
        prompt=dedent(
            f"""
        You are a plan reviewer, you are:
            always given a pddl domain and pddl problem file
            sometimes given a pddl file for types for a specific problem
            always given a plan generated by another planner agent

        ------ DOMAIN START ------
        {domain}
        ------ DOMAIN END ------
        ------ PROBLEM START ------
        {problem}
        ------ PROBLEM END ------

        Your task:
            - Review the plan and check if it is valid
            - Review tha plan to see if it is optimal
            - If the plan is valid, return "<approve>"
            - If the plan is invalid or sub-optimal, return "<reject>"
            - If the plan is invalid, also return a list of all the actions that are invalid
            - If the plan is valid, also return a list of all the actions that are valid

        INSTRUCTIONS:
        - After you're done with your tasks, respond to the supervisor directly
        - Respond ONLY with the results of your work, do NOT include ANY other text.
        """
        ),
        name="plan_reviewer",
    )
    pddl_translator = create_react_agent(
        model=small_model,  # Pass your Groq model here
        tools=[],  # Add any tools if needed
        prompt=dedent(
            f"""
        You are a pddl translator, you are:
            always given a pddl domain and pddl problem file
            sometimes given a pddl file for types for a specific problem
            always given a plan generated by another planner agent

        ------ DOMAIN START ------
        {domain}
        ------ DOMAIN END ------
        ------ PROBLEM START ------
        {problem}
        ------ PROBLEM END ------

        Your task:
            - Translate the plan into pddl syntax and output the pddl plan
            - You must always use the same pddl syntax as the domain and problem files, do not invent your own

        INSTRUCTIONS:
        - After you're done with your tasks, respond to the supervisor directly
        - Respond ONLY with the results of your work, do NOT include ANY other text.
        """
        ),
        name="pddl_translator",
    )

    supervisor = create_supervisor(
        model=small_model,
        agents=[research_agent, reviewing_agent, pddl_translator],
        prompt=dedent(
            f"""
        You are a supervisor managing two agents:
        - a plan generator. Assign planning tasks to this agent
        - a plan reviewer. Assign reviewing tasks to this agent
        - a pddl translator. Assign final english to pddl translation task to this agent
        
        The overall goal:
            to generate a plan in english, review it, and then translate it into pddl syntax.
        
        INSTRUCTIONS:
        - Assign work to one agent at a time, do not call agents in parallel.
        - Do not do any work yourself.
        - Never finish without translating the plan to pddl syntax.
        """
        ),
        add_handoff_back_messages=True,
        output_mode="full_history",
    ).compile()

    message = {
        "role": "user",
        "content": dedent(f"""
        Start the task.
    """),
    }

    print(message)

    for chunk in supervisor.stream(
        {
            "messages": [
                message
            ]
        },
    ):
        pretty_print_messages(chunk, last_message=True)

    print()

    final_message_history = chunk["supervisor"]["messages"]
    print(final_message_history[-4].content)
    return final_message_history


# load task1 pddl
domain1 = read_pddl_file("task1/domain.pddl")
problem1 = read_pddl_file("task1/pfile1.pddl")


# load task2 pddl
domain2 = read_pddl_file("task2_typed/domain.pddl")
problem2 = read_pddl_file("task2_typed/pfile.pddl")

domain3 = read_pddl_file("task3_cost/domain.pddl")
problem3 = read_pddl_file("task3_cost/prob.pddl")

domain4 = read_pddl_file("task4/domain.pddl")
problem4 = read_pddl_file("task4/prob.pddl")

history1 = workflow_planning(domain1, problem1)
history2 = workflow_planning(domain2, problem2)
history3 = workflow_planning(domain3, problem3)
history4 = workflow_planning(domain4, problem4)
